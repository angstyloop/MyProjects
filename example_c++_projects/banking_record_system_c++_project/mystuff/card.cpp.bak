#include <iostream>
#include <cstdlib>
#include "card.h"

using std::cin;
using std::cout;
using std::endl;
using std::ifstream;
using std::ofstream;
using std::ios;
using std::getline;

// format text to width. insert a newline after every $width characters. add 4 spaces at front.
card& card::format_to_width() {

  string
    formatted_front = string(4, ' ') //4-space
  , formatted_back  = string(4, ' ') //4-space indent
  ;

  // format the front
  int char_count = 5; // account for the indent
  for (char c: front){
    if (width < char_count) {
      formatted_front.push_back('\n');
      char_count = 0;
    }
    formatted_front.push_back(c);
    ++char_count;
  }
  front = formatted_front;

  // format the back
  char_count = 5; // account for the indent
  for (char c: back){
    if (width < char_count) {
      formatted_back.push_back('\n');
      char_count = 0;
    }
    formatted_back.push_back(c);
    ++char_count;
  }
  back = formatted_back;
 
  // return self for fluent style
  return *this;
}

//let a user fill out the front of a card in BASH; fluent style return
card& card::read_front() {
  cout << "\nWrite on the front of the card, then press the RETURN key.\n\n";
  getline(cin, front);
  getline(cin, front);
  return *this;
}

//let a user fill out the back of a card in BASH; fluent style return
card& card::read_back() {
  cout << "\nWrite on the back of the card, then press the RETURN key.\n\n";
  getline(cin, back);
  getline(cin, back);
  return *this;
}

//show the front of a card on std output; fluent style return
card& card::show_front() {
  cout << front << endl;
  return *this;
}

//show the back of a card on std output; fluent style return
card& card::show_back() {
  cout << back << endl;
  return *this;
}

mono_card& mono_card::format_to_width() {
  component.format_to_width();
  return *this;
} 

mono_card& mono_card::show_front() {
  component.show_front();
  return *this;
}

mono_card& mono_card::show_back() {
  component.show_back();
  return *this;
}

mono_card& mono_card::read_front() {
  component.read_front();
  return *this;
}

mono_card& mono_card::read_back() {
  component.read_back();
  return *this;
}

border& border::format_to_width() {
  mono_card::format_to_width();  
  return *this;
}

border& border::read_front() {
  char token;
  cout << "Front border token character: "; 
  string s;  // need to handle non-char input
  if (cin >> s; s.size > 0) 
    token = s[0];    
  front = string(width, token);
  mono_card::read_front();
  return *this;
}

border& border::read_back() {
  char token;
  cout << "Back border token (character): ";
  string s; // need to handle non-char input
  if (cin >> s; s.size() > 0)
    token = s[0];
  back = string(width, token);
  mono_card::read_back();
  return *this;
}

border& border::show_front() {
  cout 
  << front + '\n'
  << "front\n"
  << front << '\n';
  ;
  
  mono_card::show_front();
  cout << front << '\n' << front << '\n' << endl;
  return *this;
}

border& border::show_back() {
  cout 
  << back + '\n'
  << "back\n"
  << back + '\n'
  ;
  mono_card::show_back();
  cout << back << '\n' << back << endl;
  return *this;
}

side& side::format_to_width() {
  mono_card::format_to_width();
  return *this;
}

side& side::read_front() {
  char token;  
  cout << "Front sides token (character): ";
  string s;
  if (cin >> s; s.size() > 0)
    token = s[0];
  front = token;
  mono_card::read_front();
  return *this;
}

side& side::read_back() {
  char token;
  cout << "Back sides token (character): ";
  string s;
  if (cin >> s; s.size() > 0)
    token = s[0];
  back = token;
  mono_card::read_back();
  return *this;
} 

int main() {
  const int width = 50;
  card myCard = card(width);
  border myBorder = border(myCard)
    .read_front()
    .read_back()
  ;
  myBorder
    .format_to_width()
    .show_front()
    .show_back()
  ;
}
