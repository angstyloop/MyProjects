#!/bin/bash

### Boilerplate for named args.
declare -A args=( 
    [brand]="" 
    [cardId]="" 
    [boardId]="" 
    [newListId]="" 
    [newReleaseName]="" 
    [approvedReadyToUpdateLabelId]="" 
    [s3LogDir]=""
    [awsProfile]=""
)
usageStr="
Usage: ./$0 --argName argValue
Arguments: [${!args[*]}]
"
if [ $# -lt 2 ]; then
    echo "$usageStr" && exit 1
fi
for ((i=1; i<=$#; i++)); do
   match=""
   for it in "${!args[@]}"; do
       if [ "--$it" == "${!i}" ]; then
           ((i++))
           args[$it]=${!i}
           match=1
       fi
   done
   if [ -z $match ]; then
       echo "$usageStr" && exit 1
   fi
done

# Args were already checked for null in async_updates, so there's no need to do it again here.

# Create a log for the given brand and s3LogDir. 
log="./logs.d/${args[brand]}.log"
touch $log
chmod u+rw $log
s3Log="${args[s3LogDir]}/${args[brand]}.log"

# Deploy the update to the brand. On success, move the trello card for the brand to the list for the new release, and remove the card's "ApprovedReadyToUpdateLabel". On fail, log failure, and leave the card as it is. Note the mock_update_script randomly fails/succeeds.
if ./mock_update_script "${args[brand]}" >> $log 2>&1; then
    {
        echo Moving card ...
        ./move_card "${args[cardId]}" "${args[boardId]}" "${args[newListId]}"
        echo Removing \"Approved Ready to Update\" label ...
        ./remove_label_from_card "${args[cardId]}" "${args[approvedReadyToUpdateLabelId]}"
    } >> $log
else
    {
        echo "Failed to deploy update ${args[newReleaseName]} to cluster for brand ${args[brand]}."
        echo "Command failed: dfs-deploy release/${args[newReleaseName]} ${args[brand]} nodb"
    } >> $log
fi

# copy log to s3
aws s3 cp $log $s3Log
